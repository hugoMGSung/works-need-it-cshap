//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 템플릿에서 생성되었습니다.
//
//     이 파일을 수동으로 변경하면 응용 프로그램에서 예기치 않은 동작이 발생할 수 있습니다.
//     이 파일을 수동으로 변경하면 코드가 다시 생성될 때 변경 내용을 덮어씁니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfSMSApp.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SMSEntities : DbContext
    {
        public SMSEntities()
            : base("name=SMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Antenna> Antenna { get; set; }
        public virtual DbSet<Barcode> Barcode { get; set; }
        public virtual DbSet<BookOut> BookOut { get; set; }
        public virtual DbSet<BookOutItem> BookOutItem { get; set; }
        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<Reader> Reader { get; set; }
        public virtual DbSet<Stock> Stock { get; set; }
        public virtual DbSet<Store> Store { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tag> Tag { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual int DeleteAntenna(Nullable<int> antennaID)
        {
            var antennaIDParameter = antennaID.HasValue ?
                new ObjectParameter("AntennaID", antennaID) :
                new ObjectParameter("AntennaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAntenna", antennaIDParameter);
        }
    
        public virtual int DeleteBarcode(Nullable<int> barcodeID)
        {
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBarcode", barcodeIDParameter);
        }
    
        public virtual int DeleteBookOut(Nullable<int> bookOutID)
        {
            var bookOutIDParameter = bookOutID.HasValue ?
                new ObjectParameter("BookOutID", bookOutID) :
                new ObjectParameter("BookOutID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookOut", bookOutIDParameter);
        }
    
        public virtual int DeleteBookOutItem(Nullable<int> bookOutItemID)
        {
            var bookOutItemIDParameter = bookOutItemID.HasValue ?
                new ObjectParameter("BookOutItemID", bookOutItemID) :
                new ObjectParameter("BookOutItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBookOutItem", bookOutItemIDParameter);
        }
    
        public virtual int DeleteBrand(Nullable<int> brandID)
        {
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBrand", brandIDParameter);
        }
    
        public virtual int DeleteCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", categoryIDParameter);
        }
    
        public virtual int DeleteItem(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItem", itemIDParameter);
        }
    
        public virtual int DeleteReader(Nullable<int> readerID)
        {
            var readerIDParameter = readerID.HasValue ?
                new ObjectParameter("ReaderID", readerID) :
                new ObjectParameter("ReaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReader", readerIDParameter);
        }
    
        public virtual int DeleteStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStock", stockIDParameter);
        }
    
        public virtual int DeleteStore(Nullable<int> storeID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStore", storeIDParameter);
        }
    
        public virtual int Deletesysdiagrams(Nullable<int> diagram_id)
        {
            var diagram_idParameter = diagram_id.HasValue ?
                new ObjectParameter("diagram_id", diagram_id) :
                new ObjectParameter("diagram_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletesysdiagrams", diagram_idParameter);
        }
    
        public virtual int DeleteTag(Nullable<int> tagID)
        {
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTag", tagIDParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIDParameter);
        }
    
        public virtual int InsertAntenna(Nullable<int> antennaNumber, Nullable<int> readerID, Nullable<decimal> rxPower, Nullable<decimal> txPower, ObjectParameter iD)
        {
            var antennaNumberParameter = antennaNumber.HasValue ?
                new ObjectParameter("AntennaNumber", antennaNumber) :
                new ObjectParameter("AntennaNumber", typeof(int));
    
            var readerIDParameter = readerID.HasValue ?
                new ObjectParameter("ReaderID", readerID) :
                new ObjectParameter("ReaderID", typeof(int));
    
            var rxPowerParameter = rxPower.HasValue ?
                new ObjectParameter("RxPower", rxPower) :
                new ObjectParameter("RxPower", typeof(decimal));
    
            var txPowerParameter = txPower.HasValue ?
                new ObjectParameter("TxPower", txPower) :
                new ObjectParameter("TxPower", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAntenna", antennaNumberParameter, readerIDParameter, rxPowerParameter, txPowerParameter, iD);
        }
    
        public virtual int InsertBarcode(string barcodeNumber, ObjectParameter iD)
        {
            var barcodeNumberParameter = barcodeNumber != null ?
                new ObjectParameter("BarcodeNumber", barcodeNumber) :
                new ObjectParameter("BarcodeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBarcode", barcodeNumberParameter, iD);
        }
    
        public virtual int InsertBookOut(Nullable<System.DateTime> date, string project, string reason, Nullable<int> userID, ObjectParameter iD)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBookOut", dateParameter, projectParameter, reasonParameter, userIDParameter, iD);
        }
    
        public virtual int InsertBookOutItem(Nullable<int> bookOutID, Nullable<int> itemID, Nullable<int> quantity, ObjectParameter iD)
        {
            var bookOutIDParameter = bookOutID.HasValue ?
                new ObjectParameter("BookOutID", bookOutID) :
                new ObjectParameter("BookOutID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBookOutItem", bookOutIDParameter, itemIDParameter, quantityParameter, iD);
        }
    
        public virtual int InsertBrand(string brandDescription, string brandName, ObjectParameter iD)
        {
            var brandDescriptionParameter = brandDescription != null ?
                new ObjectParameter("BrandDescription", brandDescription) :
                new ObjectParameter("BrandDescription", typeof(string));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBrand", brandDescriptionParameter, brandNameParameter, iD);
        }
    
        public virtual int InsertCategory(string categoryDescription, string categoryName, ObjectParameter iD)
        {
            var categoryDescriptionParameter = categoryDescription != null ?
                new ObjectParameter("CategoryDescription", categoryDescription) :
                new ObjectParameter("CategoryDescription", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCategory", categoryDescriptionParameter, categoryNameParameter, iD);
        }
    
        public virtual int InsertItem(Nullable<int> barcodeID, Nullable<int> brandID, Nullable<int> categoryID, string itemDescription, string itemName, Nullable<bool> itemStatus, Nullable<int> tagID, ObjectParameter iD)
        {
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(bool));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItem", barcodeIDParameter, brandIDParameter, categoryIDParameter, itemDescriptionParameter, itemNameParameter, itemStatusParameter, tagIDParameter, iD);
        }
    
        public virtual int InsertReader(string iPaddress, Nullable<int> numAntennas, Nullable<int> storeID, ObjectParameter iD)
        {
            var iPaddressParameter = iPaddress != null ?
                new ObjectParameter("IPaddress", iPaddress) :
                new ObjectParameter("IPaddress", typeof(string));
    
            var numAntennasParameter = numAntennas.HasValue ?
                new ObjectParameter("NumAntennas", numAntennas) :
                new ObjectParameter("NumAntennas", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReader", iPaddressParameter, numAntennasParameter, storeIDParameter, iD);
        }
    
        public virtual int InsertStock(Nullable<int> itemID, Nullable<int> quantity, Nullable<int> storeID, ObjectParameter iD)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStock", itemIDParameter, quantityParameter, storeIDParameter, iD);
        }
    
        public virtual int InsertStore(Nullable<int> barcodeID, Nullable<bool> itemStatus, string storeLocation, string storeName, Nullable<int> tagID, ObjectParameter iD)
        {
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(bool));
    
            var storeLocationParameter = storeLocation != null ?
                new ObjectParameter("StoreLocation", storeLocation) :
                new ObjectParameter("StoreLocation", typeof(string));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStore", barcodeIDParameter, itemStatusParameter, storeLocationParameter, storeNameParameter, tagIDParameter, iD);
        }
    
        public virtual int Insertsysdiagrams(byte[] definition, string name, Nullable<int> principal_id, Nullable<int> version, ObjectParameter iD)
        {
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var principal_idParameter = principal_id.HasValue ?
                new ObjectParameter("principal_id", principal_id) :
                new ObjectParameter("principal_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertsysdiagrams", definitionParameter, nameParameter, principal_idParameter, versionParameter, iD);
        }
    
        public virtual int InsertTag(string ePC, ObjectParameter iD)
        {
            var ePCParameter = ePC != null ?
                new ObjectParameter("EPC", ePC) :
                new ObjectParameter("EPC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTag", ePCParameter, iD);
        }
    
        public virtual int InsertUser(Nullable<bool> userActivated, Nullable<bool> userAdmin, string userEmail, string userIdentityNumber, string userName, string userPassword, string userSurname, ObjectParameter iD)
        {
            var userActivatedParameter = userActivated.HasValue ?
                new ObjectParameter("UserActivated", userActivated) :
                new ObjectParameter("UserActivated", typeof(bool));
    
            var userAdminParameter = userAdmin.HasValue ?
                new ObjectParameter("UserAdmin", userAdmin) :
                new ObjectParameter("UserAdmin", typeof(bool));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userIdentityNumberParameter = userIdentityNumber != null ?
                new ObjectParameter("UserIdentityNumber", userIdentityNumber) :
                new ObjectParameter("UserIdentityNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userSurnameParameter = userSurname != null ?
                new ObjectParameter("UserSurname", userSurname) :
                new ObjectParameter("UserSurname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userActivatedParameter, userAdminParameter, userEmailParameter, userIdentityNumberParameter, userNameParameter, userPasswordParameter, userSurnameParameter, iD);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateAntenna(Nullable<int> antennaNumber, Nullable<int> readerID, Nullable<decimal> rxPower, Nullable<decimal> txPower, Nullable<int> antennaID)
        {
            var antennaNumberParameter = antennaNumber.HasValue ?
                new ObjectParameter("AntennaNumber", antennaNumber) :
                new ObjectParameter("AntennaNumber", typeof(int));
    
            var readerIDParameter = readerID.HasValue ?
                new ObjectParameter("ReaderID", readerID) :
                new ObjectParameter("ReaderID", typeof(int));
    
            var rxPowerParameter = rxPower.HasValue ?
                new ObjectParameter("RxPower", rxPower) :
                new ObjectParameter("RxPower", typeof(decimal));
    
            var txPowerParameter = txPower.HasValue ?
                new ObjectParameter("TxPower", txPower) :
                new ObjectParameter("TxPower", typeof(decimal));
    
            var antennaIDParameter = antennaID.HasValue ?
                new ObjectParameter("AntennaID", antennaID) :
                new ObjectParameter("AntennaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAntenna", antennaNumberParameter, readerIDParameter, rxPowerParameter, txPowerParameter, antennaIDParameter);
        }
    
        public virtual int UpdateBarcode(string barcodeNumber, Nullable<int> barcodeID)
        {
            var barcodeNumberParameter = barcodeNumber != null ?
                new ObjectParameter("BarcodeNumber", barcodeNumber) :
                new ObjectParameter("BarcodeNumber", typeof(string));
    
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBarcode", barcodeNumberParameter, barcodeIDParameter);
        }
    
        public virtual int UpdateBookOut(Nullable<System.DateTime> date, string project, string reason, Nullable<int> userID, Nullable<int> bookOutID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bookOutIDParameter = bookOutID.HasValue ?
                new ObjectParameter("BookOutID", bookOutID) :
                new ObjectParameter("BookOutID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookOut", dateParameter, projectParameter, reasonParameter, userIDParameter, bookOutIDParameter);
        }
    
        public virtual int UpdateBookOutItem(Nullable<int> bookOutID, Nullable<int> itemID, Nullable<int> quantity, Nullable<int> bookOutItemID)
        {
            var bookOutIDParameter = bookOutID.HasValue ?
                new ObjectParameter("BookOutID", bookOutID) :
                new ObjectParameter("BookOutID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var bookOutItemIDParameter = bookOutItemID.HasValue ?
                new ObjectParameter("BookOutItemID", bookOutItemID) :
                new ObjectParameter("BookOutItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBookOutItem", bookOutIDParameter, itemIDParameter, quantityParameter, bookOutItemIDParameter);
        }
    
        public virtual int UpdateBrand(string brandDescription, string brandName, Nullable<int> brandID)
        {
            var brandDescriptionParameter = brandDescription != null ?
                new ObjectParameter("BrandDescription", brandDescription) :
                new ObjectParameter("BrandDescription", typeof(string));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBrand", brandDescriptionParameter, brandNameParameter, brandIDParameter);
        }
    
        public virtual int UpdateCategory(string categoryDescription, string categoryName, Nullable<int> categoryID)
        {
            var categoryDescriptionParameter = categoryDescription != null ?
                new ObjectParameter("CategoryDescription", categoryDescription) :
                new ObjectParameter("CategoryDescription", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategory", categoryDescriptionParameter, categoryNameParameter, categoryIDParameter);
        }
    
        public virtual int UpdateItem(Nullable<int> barcodeID, Nullable<int> brandID, Nullable<int> categoryID, string itemDescription, string itemName, Nullable<bool> itemStatus, Nullable<int> tagID, Nullable<int> itemID)
        {
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(bool));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItem", barcodeIDParameter, brandIDParameter, categoryIDParameter, itemDescriptionParameter, itemNameParameter, itemStatusParameter, tagIDParameter, itemIDParameter);
        }
    
        public virtual int UpdateReader(string iPaddress, Nullable<int> numAntennas, Nullable<int> storeID, Nullable<int> readerID)
        {
            var iPaddressParameter = iPaddress != null ?
                new ObjectParameter("IPaddress", iPaddress) :
                new ObjectParameter("IPaddress", typeof(string));
    
            var numAntennasParameter = numAntennas.HasValue ?
                new ObjectParameter("NumAntennas", numAntennas) :
                new ObjectParameter("NumAntennas", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var readerIDParameter = readerID.HasValue ?
                new ObjectParameter("ReaderID", readerID) :
                new ObjectParameter("ReaderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateReader", iPaddressParameter, numAntennasParameter, storeIDParameter, readerIDParameter);
        }
    
        public virtual int UpdateStock(Nullable<int> itemID, Nullable<int> quantity, Nullable<int> storeID, Nullable<int> stockID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStock", itemIDParameter, quantityParameter, storeIDParameter, stockIDParameter);
        }
    
        public virtual int UpdateStore(Nullable<int> barcodeID, Nullable<bool> itemStatus, string storeLocation, string storeName, Nullable<int> tagID, Nullable<int> storeID)
        {
            var barcodeIDParameter = barcodeID.HasValue ?
                new ObjectParameter("BarcodeID", barcodeID) :
                new ObjectParameter("BarcodeID", typeof(int));
    
            var itemStatusParameter = itemStatus.HasValue ?
                new ObjectParameter("ItemStatus", itemStatus) :
                new ObjectParameter("ItemStatus", typeof(bool));
    
            var storeLocationParameter = storeLocation != null ?
                new ObjectParameter("StoreLocation", storeLocation) :
                new ObjectParameter("StoreLocation", typeof(string));
    
            var storeNameParameter = storeName != null ?
                new ObjectParameter("StoreName", storeName) :
                new ObjectParameter("StoreName", typeof(string));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStore", barcodeIDParameter, itemStatusParameter, storeLocationParameter, storeNameParameter, tagIDParameter, storeIDParameter);
        }
    
        public virtual int Updatesysdiagrams(byte[] definition, string name, Nullable<int> principal_id, Nullable<int> version, Nullable<int> diagram_id)
        {
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var principal_idParameter = principal_id.HasValue ?
                new ObjectParameter("principal_id", principal_id) :
                new ObjectParameter("principal_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var diagram_idParameter = diagram_id.HasValue ?
                new ObjectParameter("diagram_id", diagram_id) :
                new ObjectParameter("diagram_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Updatesysdiagrams", definitionParameter, nameParameter, principal_idParameter, versionParameter, diagram_idParameter);
        }
    
        public virtual int UpdateTag(string ePC, Nullable<int> tagID)
        {
            var ePCParameter = ePC != null ?
                new ObjectParameter("EPC", ePC) :
                new ObjectParameter("EPC", typeof(string));
    
            var tagIDParameter = tagID.HasValue ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTag", ePCParameter, tagIDParameter);
        }
    
        public virtual int UpdateUser(Nullable<bool> userActivated, Nullable<bool> userAdmin, string userEmail, string userIdentityNumber, string userName, string userPassword, string userSurname, Nullable<int> userID)
        {
            var userActivatedParameter = userActivated.HasValue ?
                new ObjectParameter("UserActivated", userActivated) :
                new ObjectParameter("UserActivated", typeof(bool));
    
            var userAdminParameter = userAdmin.HasValue ?
                new ObjectParameter("UserAdmin", userAdmin) :
                new ObjectParameter("UserAdmin", typeof(bool));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userIdentityNumberParameter = userIdentityNumber != null ?
                new ObjectParameter("UserIdentityNumber", userIdentityNumber) :
                new ObjectParameter("UserIdentityNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userSurnameParameter = userSurname != null ?
                new ObjectParameter("UserSurname", userSurname) :
                new ObjectParameter("UserSurname", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userActivatedParameter, userAdminParameter, userEmailParameter, userIdentityNumberParameter, userNameParameter, userPasswordParameter, userSurnameParameter, userIDParameter);
        }
    }
}
